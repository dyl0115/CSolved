<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.question.mapper.QuestionMapper">

    <insert id="insertQuestion" useGeneratedKeys="true" keyProperty="id">
        insert into questions(author_id,
                              anonymous,
                              title,
                              content,
                              category_id,
                              views,
                              deleted_at)
        values (#{authorId},
                #{anonymous},
                #{title},
                #{content},
                #{categoryId},
                #{views},
                #{deletedAt});
    </insert>

    <update id="updateQuestion">
        update questions
        set anonymous   = #{anonymous},
            title       = #{title},
            content     = #{content},
            category_id = #{categoryId}
        where id = #{id};
    </update>

    <select id="findAllQuestions" resultMap="QuestionDtoMap">
        SELECT q.*,
               u.nickname  AS author_nickname,
               COUNT(a.id) AS answer_count,
               c.name      AS category_name,
               t.name      AS tag_name
        FROM (SELECT *
              FROM questions
              WHERE deleted_at IS NULL
              ORDER BY created_at DESC
              LIMIT #{offset} , #{limit}) AS q
                 LEFT JOIN
             users AS u ON q.author_id = u.id
                 LEFT JOIN
             answers AS a ON q.id = a.question_id
                 LEFT JOIN
             category AS c ON q.category_id = c.id
                 LEFT JOIN
             question_tags AS qt ON q.id = qt.question_id
                 LEFT JOIN
             tags AS t ON qt.tag_id = t.id
        GROUP BY q.id, t.id;
    </select>

    <resultMap id="QuestionDtoMap" type="store.csolved.csolved.domain.question.dto.QuestionDto" autoMapping="true">
        <id property="questionId" column="id"/>
        <result property="authorId" column="author_id"/>
        <collection property="tags" ofType="java.lang.String">
            <result column="tag_name"/>
        </collection>
    </resultMap>

    <select id="findQuestionByQuestionId" resultMap="QuestionDtoMap">
        SELECT q.*,
               u.nickname  AS author_nickname,
               COUNT(a.id) AS answer_count,
               c.name      AS category_name,
               t.name      AS tag_name
        FROM questions AS q
                 LEFT JOIN
             users AS u ON q.author_id = u.id
                 LEFT JOIN
             answers AS a ON q.id = a.question_id
                 LEFT JOIN
             category AS c ON q.category_id = c.id
                 LEFT JOIN
             question_tags AS qt ON q.id = qt.question_id
                 LEFT JOIN
             tags AS t ON qt.tag_id = t.id
        where q.id = #{questionId}
        group by q.id, t.id;
    </select>


    <update id="softDeleteQuestionByQuestionId">
        update questions
        set deleted_at = current_timestamp
        where id = #{questionId};
    </update>

    <select id="existUserInQuestionLikes">
        select exists(select 1
                      from question_likes
                      where user_id = #{authorId}
                        and question_id = #{questionId});
    </select>

    <update id="increaseLikesInQuestions">
        update questions
        set likes = likes + 1
        where id = #{questionId};
    </update>

    <insert id="insertUserInQuestionLikes">
        insert into question_likes(question_id, user_id)
        values (#{questionId}, #{authorId});
    </insert>

    <update id="increaseViewInQuestions">
        update questions
        set views = views + 1
        where id = #{questionId};
    </update>
</mapper>