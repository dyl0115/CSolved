<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.question.mapper.QuestionMapper">

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into questions(user_id, anonymous, title, content,
                              category_id, views, deleted_at)
        values (#{authorId}, #{anonymous}, #{title},
                #{content}, #{categoryId}, #{views}, #{deletedAt});
    </insert>

    <update id="update">
        update questions
        set anonymous   = #{question.anonymous},
            title       = #{question.title},
            content     = #{question.content},
            category_id = #{question.categoryId}
        where id = #{questionId};
    </update>

    <select id="countQuestions">
        select count(q.id)
        from questions q
        left join category c on q.category_id = c.id
        left join users u on q.user_id = u.id
        where q.deleted_at is null
        <if test="filterType == 'CATEGORY' and filterValue != null and filterValue != 0">
            and q.category_id = #{filterValue}
        </if>
        <choose>
            <when test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
                and q.title like concat('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
                and u.nickname like #{searchKeyword}
                and q.anonymous = false
            </when>
        </choose>
    </select>

    <select id="getQuestions">
        select q.*,
        u.nickname author_nickname,
        c.id category_id,
        c.name category_name
        from questions q
        left join users u on q.user_id = u.id
        left join category c on q.category_id = c.id
        where q.deleted_at is null
        <if test="filterType == 'CATEGORY' and filterValue != null and filterValue != 0">
            and q.category_id = #{filterValue}
        </if>
        <choose>
            <when test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
                and q.title like concat('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
                and u.nickname like #{searchKeyword}
                and q.anonymous = false
            </when>
        </choose>
        order by
        <choose>
            <when test="sortType == 'RECENT'">q.created_at desc</when>
            <when test="sortType == 'VIEWS'">q.views desc</when>
            <when test="sortType == 'LIKES'">q.likes desc</when>
            <when test="sortType == 'ANSWERS'">q.answer_count desc</when>
        </choose>
        limit #{offset}, #{size};
    </select>

    <select id="getQuestionDetail">
        select q.*,
               u.id       author_id,
               u.nickname author_nickname,
               c.id       category_id,
               c.name     category_name
        from questions q
                 left join users u on q.user_id = u.id
                 left join category c on q.category_id = c.id
        where q.id = #{questionId};
    </select>

    <update id="softDelete">
        update questions
        set deleted_at = current_timestamp
        where id = #{questionId};
    </update>

    <select id="hasUserLiked">
        select exists(select 1
                      from question_likes
                      where user_id = #{authorId}
                        and question_id = #{questionId});
    </select>

    <update id="incrementLikes">
        update questions
        set likes = likes + 1
        where id = #{questionId};
    </update>

    <insert id="addUserLike">
        insert into question_likes(question_id, user_id)
        values (#{questionId}, #{authorId});
    </insert>

    <update id="increaseView">
        update questions
        set views = views + 1
        where id = #{questionId};
    </update>
</mapper>