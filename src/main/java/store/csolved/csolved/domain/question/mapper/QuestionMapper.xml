<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.question.mapper.QuestionMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into questions(user_id, anonymous, title,
                              content, category_id)
        values (#{authorId}, #{anonymous}, #{title},
                #{content}, #{categoryId});
    </insert>

    <update id="update">
        update questions
        set anonymous   = #{question.anonymous},
            title       = #{question.title},
            content     = #{question.content},
            category_id = #{question.categoryId}
        where id = #{questionId};
    </update>

    <select id="countQuestions">
        select count(q.id)
        from questions q
        left join category c on q.category_id = c.id
        left join users u on q.user_id = u.id
        where q.deleted_at is null
        <if test="filterType == 'CATEGORY' and filterValue != null and filterValue != 0">
            and q.category_id = #{filterValue}
        </if>
        <choose>
            <when test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
                and q.title like concat('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
                and u.nickname like #{searchKeyword}
                and q.anonymous is false
            </when>
        </choose>
    </select>

    <resultMap id="QuestionResultMap" type="store.csolved.csolved.domain.question.entity.Question">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="anonymous" column="anonymous"/>
        <result property="content" column="content"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="answerCount" column="answer_count"/>
        <result property="createdAt" column="created_at"/>
        <collection property="tags" ofType="store.csolved.csolved.domain.tag.entity.Tag">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <select id="getQuestions" resultMap="QuestionResultMap">
        SELECT
        q.id id,
        q.title title,
        q.anonymous anonymous,
        q.content content,
        q.views views,
        q.likes likes,
        q.answer_count answer_count,
        q.created_at created_at,
        u.id author_id,
        u.nickname author_nickname,
        c.id category_id,
        c.name category_name,
        t.id tag_id,
        t.name tag_name
        FROM (
        SELECT *
        FROM questions
        WHERE deleted_at IS NULL
        <if test="filterType == 'CATEGORY' and filterValue != null and filterValue != 0">
            AND category_id = #{filterValue}
        </if>
        <if test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
            AND title LIKE CONCAT('%', #{searchKeyword}, '%')
        </if>
        ORDER BY
        <if test="sortType == 'RECENT'">created_at DESC</if>
        <if test="sortType == 'VIEWS'">views DESC</if>
        <if test="sortType == 'LIKES'">likes DESC</if>
        <if test="sortType == 'ANSWERS'">answer_count DESC</if>
        LIMIT #{offset}, #{size}
        ) q
        LEFT JOIN users u ON u.id = q.user_id
        <if test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
            AND u.nickname LIKE #{searchKeyword}
            AND q.anonymous IS FALSE
        </if>
        LEFT JOIN category c ON c.id = q.category_id
        LEFT JOIN question_tags qt ON qt.question_id = q.id
        LEFT JOIN tags t ON t.id = qt.tag_id
    </select>

    <select id="getQuestion" resultMap="QuestionResultMap">
        select q.*,
               u.id       author_id,
               u.nickname author_nickname,
               c.id       category_id,
               c.name     category_name,
               t.id       tag_id,
               t.name     tag_name
        from questions q
                 left join users u on q.user_id = u.id
                 left join category c on q.category_id = c.id
                 left join question_tags qt on q.id = qt.question_id
                 left join tags t on t.id = qt.tag_id
        where q.id = #{questionId};
    </select>

    <update id="softDelete">
        update questions
        set deleted_at = current_timestamp
        where id = #{questionId};
    </update>

    <select id="hasUserLiked">
        select exists(select 1
                      from question_likes
                      where user_id = #{authorId}
                        and question_id = #{questionId});
    </select>

    <update id="incrementLikes">
        update questions
        set likes = likes + 1
        where id = #{questionId};
    </update>

    <insert id="addUserLike">
        insert into question_likes(question_id, user_id)
        values (#{questionId}, #{authorId});
    </insert>

    <update id="increaseView">
        update questions
        set views = views + 1
        where id = #{questionId};
    </update>
</mapper>