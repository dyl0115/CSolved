<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.question.mapper.QuestionMapper">

    <insert id="insertQuestion" useGeneratedKeys="true" keyProperty="id">
        insert into questions(user_id,
                              is_anonymous,
                              title,
                              content,
                              category_id,
                              views,
                              deleted_at)
        values (#{userId},
                #{anonymous},
                #{title},
                #{content},
                #{categoryId},
                #{views},
                #{deletedAt});
    </insert>

    <update id="updateQuestion">
        update questions
        set is_anonymous = #{isAnonymous},
            title        = #{title},
            content      = #{content},
            category_id  = #{categoryId}
        where id = #{id};
    </update>

    <select id="findAllQuestions" resultMap="QuestionDtoMap">
        select q.id                         as question_id,
               q.user_id                    as user_id,
               u.nickname                   as author_nickname,
               q.is_anonymous               as is_anonymous,
               q.title                      as title,
               q.content                    as content,
               c.name                       as category_name,
               q.category_id                as category_id,
               q.views                      as views,
               q.likes                      as likes,
               q.created_at                 as created_at,
               t.id                         as tag_id,
               t.name                       as tag_name,
               (select count(*)
                from answers as a
                where a.question_id = q.id) as answer_count
        from questions as q
                 left join users as u on q.user_id = u.id
                 left join question_tags as qt on q.id = qt.question_id
                 left join tags as t on qt.tag_id = t.id
                 left join category as c on q.category_id = c.id
        where q.deleted_at is null
        order by q.created_at desc
        limit #{offset}, #{limit};
    </select>

    <resultMap id="QuestionDtoMap" type="store.csolved.csolved.domain.question.dto.QuestionDto">
        <id property="questionId" column="question_id"/>
        <result property="authorId" column="user_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="anonymous" column="is_anonymous"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="answerCount" column="answer_count"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="createdAt" column="created_at"/>
        <collection property="tags" ofType="store.csolved.csolved.domain.tag.Tag">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <select id="findQuestionByQuestionId" resultMap="QuestionDtoMap">
        select q.id                         as question_id,
               q.user_id                    as user_id,
               q.is_anonymous               as is_anonymous,
               q.title                      as title,
               q.content                    as content,
               c.name                       as category_name,
               q.category_id                as category_id,
               q.views                      as views,
               q.likes                      as likes,
               q.created_at                 as created_at,
               u.nickname                   as author_nickname,
               t.id                         as tag_id,
               t.name                       as tag_name,
               (select count(*)
                from answers as a
                where a.question_id = q.id) as answer_count
        from questions as q
                 left join users as u on q.user_id = u.id
                 left join question_tags as qt on q.id = qt.question_id
                 left join tags as t on qt.tag_id = t.id
                 left join category as c on q.category_id = c.id
        where q.id = #{questionId};
    </select>


    <update id="softDeleteQuestionByQuestionId">
        update questions
        set deleted_at = current_timestamp
        where id = #{questionId};
    </update>

    <select id="existUserInQuestionLikes">
        select exists(select 1
                      from question_likes
                      where user_id = #{userId}
                        and question_id = #{questionId});
    </select>

    <update id="increaseLikesInQuestions">
        update questions
        set likes = likes + 1
        where id = #{questionId};
    </update>

    <insert id="insertUserInQuestionLikes">
        insert into question_likes(question_id, user_id)
        values (#{questionId}, #{userId});
    </insert>

    <update id="increaseViewInQuestions">
        update questions
        set views = views + 1
        where id = #{questionId};
    </update>
</mapper>