<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.notice.mapper.NoticeMapper">

    <resultMap id="noticeResultMap" type="store.csolved.csolved.domain.notice.Notice">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="anonymous" column="anonymous"/>
        <result property="content" column="content"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="answerCount" column="answer_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="modifiedAt" column="modified_at"/>
    </resultMap>

    <insert id="saveNotice">
        insert into posts(post_type, user_id, anonymous,
                          title, content)
        values (#{postType}, #{notice.authorId},
                #{notice.anonymous}, #{notice.title},
                #{notice.content});
    </insert>

    <update id="updateNotice">
        update posts
        set anonymous   = #{notice.anonymous},
            title       = #{notice.title},
            content     = #{notice.content},
            modified_at = current_timestamp
        where id = #{noticeId};
    </update>

    <update id="deleteNotice">
        update posts
        set deleted_at = current_timestamp
        where id = #{noticeId};
    </update>

    <select id="getNotice" resultMap="noticeResultMap">
        select p.id           id,
               p.post_type    post_type,
               p.title        title,
               p.anonymous    anonymous,
               p.content      content,
               p.views        views,
               p.likes        likes,
               p.answer_count answer_count,
               p.created_at   created_at,
               p.modified_at  modified_at,
               u.id           author_id,
               u.nickname     author_nickname
        from posts p
                 left join users u on p.user_id = u.id
        where p.id = #{noticeId};
    </select>

    <select id="getNotices" resultMap="noticeResultMap">
        SELECT
        p.id id,
        p.title title,
        p.anonymous anonymous,
        p.user_id author_id,
        u.nickname author_nickname,
        p.content content,
        p.views views,
        p.likes likes,
        p.answer_count answer_count,
        p.created_at created_at,
        p.modified_at modified_at
        FROM posts p
        LEFT JOIN users u on u.id = p.user_id
        WHERE p.deleted_at IS NULL
        AND p.post_type = #{postType}
        <if test="search.searchType == 'TITLE' and
                  search.searchKeyword != null and
                  search.searchKeyword != ''">
            AND p.title LIKE concat('%', #{search.searchKeyword}, '%')
        </if>
        ORDER BY
        p.created_at desc
        LIMIT #{page.offset}, #{page.size}
    </select>

    <select id="countNotices">
        select count(p.id)
        from posts p
        where p.deleted_at is null
        and p.post_type = #{postType}
        <if test="search.searchType == 'TITLE' and
                  search.searchKeyword != null and
                  search.searchKeyword != ''">
            and p.title like concat('%', #{search.searchKeyword}, '%')
        </if>
    </select>

    <select id="hasUserLiked">
        select exists(select 1
                      from post_likes
                      where user_id = #{authorId}
                        and post_id = #{noticeId});
    </select>

    <update id="increaseLikes">
        update posts
        set likes = likes + 1
        where id = #{noticeId};
    </update>

    <insert id="addUserLike">
        insert into post_likes(post_id, user_id)
        values (#{noticeId}, #{authorId});
    </insert>

    <update id="increaseView">
        update posts
        set views = views + 1
        where id = #{noticeId};
    </update>
</mapper>